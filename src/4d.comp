#version 460


struct Camera {
    vec4 origin;
    vec4 direction;
    mat4 rotation; // Rotates +w to this direction.
};

struct Ray {
    vec4 origin;
    vec4 direction;
};

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
layout (set = 0, binding = 0) uniform Uniforms {
    Camera u_camera;
    uint u_world_size;
};
// x, y, z + (w * u_world_size)
layout (set = 1, binding = 0) uniform utexture3D t_world;
layout (set = 1, binding = 1) uniform sampler s_world;
layout (set = 1, binding = 0) uniform writeonly uimage3D o_view;
layout (set = 1, binding = 1) uniform writeonly uimage3D o_view_depth;

Ray generate_ray() {
    vec3 voxel_3d_norm = (vec3(gl_GlobalInvocationID) + 0.5) - vec3(gl_NumWorkGroups * gl_WorkGroupSize) / 2;
    vec4 origi = u_camera.origin + u_camera.rotation * vec4(voxel_3d_norm, 0);
    Ray ray;
    ray.origin = origin;
    ray.direction = u_camera.direction;
    return ray;
}

bool update_ray_intersection(inout Ray ray) {
    vec4 t0 = - ray.origin / ray.direction;
    vec4 t1 = (vec4(u_world_size) - ray.origin) / ray.direction;
    vec4 t_min_v = min(t0, t1);
    vec4 t_max_v = max(t0, t1);
    float t_min = max(t_min_v.x, max(t_min_v.y, max(t_min_v.z, t_min_v.w)));
    float t_max = min(t_max_v.x, min(t_max_v.y, min(t_max_v.z, t_max_v.w)));
    if (t_min >= t_max) {
        return false;
    } else {
        ray.origin += ray.direction * (t_min - 0.3);
        return true;
    }
}

void main() {
    Ray ray = generate_ray();
    uint value = 0;
    // ...
    imageStore(o_world_3d, ivec3(gl_GlobalInvocationID), uvec4(value, 0, 0, 0));
}
