#version 460

struct Camera {
    vec4 position;
    mat4 inv_rotation;
    float voxel_size;
};

struct Ray {
    vec4 origin;
    vec4 direction;
};

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (set = 0, binding = 0) uniform Uniforms {
    Camera u_camera;
    uint u_world_size;
};
// x, y, z + (w * u_world_size)
layout (set = 1, binding = 0) uniform utexture3D t_world;
layout (set = 1, binding = 1) uniform sampler s_world;
layout (set = 2, binding = 0, r8ui) uniform writeonly uimage3D o_view;
layout (set = 2, binding = 1, r8ui) uniform writeonly uimage3D o_view_depth;

Ray generate_ray() {
    vec3 voxel_centered = (vec3(gl_GlobalInvocationID) + 0.5) - vec3(gl_NumWorkGroups * gl_WorkGroupSize) / 2;
    vec4 origin = u_camera.position + u_camera.inv_rotation * vec4(voxel_centered * u_camera.voxel_size, 0);
    Ray ray;
    ray.origin = origin;
    ray.direction = u_camera.inv_rotation * vec4(0, 0, 0, 1);
    return ray;
}

bool update_ray_intersection(inout Ray ray) {
    vec4 t0 = - ray.origin / ray.direction;
    vec4 t1 = (vec4(u_world_size) - ray.origin) / ray.direction;
    vec4 t_min_v = min(t0, t1);
    vec4 t_max_v = max(t0, t1);
    float t_min = max(t_min_v.x, max(t_min_v.y, max(t_min_v.z, t_min_v.w)));
    float t_max = min(t_max_v.x, min(t_max_v.y, min(t_max_v.z, t_max_v.w)));
    if (t_min >= t_max) {
        return false;
    } else {
        ray.origin += ray.direction * (t_min + 0.3);
        return true;
    }
}

uint get_voxel(ivec4 location) {
    return texelFetch(usampler3D(t_world, s_world), ivec3(location.xy, location.z + u_world_size * location.w), 0).x;
}

bool contains_voxel(ivec4 location) {
    return get_voxel(location) != 0;
}

void main() {
    Ray ray = generate_ray();

    ivec4 voxel_pos = ivec4(floor(ray.origin));

    vec4 delta_dist = abs(vec4(1) / ray.direction);

    ivec4 ray_step = ivec4(sign(ray.direction));

    vec4 side_dist = (sign(ray.direction) * (vec4(voxel_pos) - ray.origin) + sign(ray.direction) * 0.5 + 0.5) * delta_dist;

    bvec4 mask;

    for (int i = 0; i < 128 * 3; i++) {
        if (contains_voxel(voxel_pos)) break;

        mask = lessThanEqual(side_dist.xyzw, min(side_dist.yzwx, min(side_dist.zwxy, side_dist.wxyz)));

        side_dist += vec4(mask) * delta_dist;
        voxel_pos += ivec4(mask) * ray_step;
    }

    uint voxel = get_voxel(voxel_pos);

    imageStore(o_view, ivec3(gl_GlobalInvocationID), uvec4(voxel, 0, 0, 0));
}
